ahora que ya tenemos limpio el registro en este caso ya tenemos nuestro proyecto vamos a proceder buscando el metodo que permite borrar.


actionDelete

Lo que hace es borra la ifnormación del id proporcionado.

Estando en el main, desde la opcion borrar, vamos a crear nuestro borrado a partir de que cuando el usuario de clcik el archivo de la imagen se borre.

Asi nosotros podamos identificar el archivo que existe en la carpeta de uploads.

si lo borramos y no existe va a marcar un error.

Lo primero que tenemos que hacer, asi que lo que tenemos que realmente preguntar es si es el libro existe en la carpeta uploas.

Asi que dentro del metodo de borar, ya se recupero la información del archivo.


     public function actionDelete($id)
        {
            $this->findModel($id)->delete();

            return $this->redirect(['index']);
        }

De acuerdo al generador del curd con la acción de borrado, buscando la información de lo que es ese registro, esta información trae muchos datos y enc oncreto lo vamos a utilizar para hacer los iguinte.

Una vez que se busque el registro lo dbemeos almacenar en modelo y este modelo vamos a preguntar si tiene el dato de imagen y si existe en la ruta de lo que es el archivo.

Vamos a ello

Quedando nuestro metodo para eliminar.

     public function actionDelete($id)
    {
        //Primero lo recuperado lo alamacenara en el modelo
        //$this->findModel($id);
        $model = $this->findModel($id);

        //Posterior a ello vamos a preguntar si tiene el dato imagen y si ese dato existe en lo que es la ruta de lo que es el archivo
        if(file_exists($model->imagen) ){

            //Hacemos una isbtruccion onlink y que permitira tener ese borado
            //Recordando que $model tiene todos los datos, rutas
            unlink($model->imagen);

            //Con esto la imagen se va a borra si encuentra en la carpeta de uploas
            // y una vez que se bore el archivo lo que se hace es borra el registro con la siguiente instrucción
            // Asi no solo se botrrara en la Bd sino que se va a borrar fisicamente con el siguiente comando
            $model->delete();

        }

        
        

        return $this->redirect(['index']);
    }



Existe un detalle con esta forma de trabajar ya que en el metodo update, primero borra el archivo anterior por lo que perde la referencia de la ruta, para ello gardaremos temporalemnte la imagen anterior antes de sobrescribir la imagen.


Los Problemas principales detectados:

    - Eliminación del archivo viejo ocurre después de haber llamado a subirFoto(), cuando en subirFoto() ya se actualizó $model->imagen, perdiendo la ruta original del archivo viejo.

    - La lógica de guardado ($model->save(false)) ya ocurre dentro de subirFoto(), así que después en actionUpdate ya no necesitas renderizar la vista de nuevo si todo fue exitoso.

    - El método subirFoto() mezcla lógica de validación y guardado, lo que puede ser confuso (aunque funcional).



Inicialmente el metod oupdate esta asi:

public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        // if ($this->request->isPost && $model->load($this->request->post()) && $model->save()) {
        //     return $this->redirect(['view', 'id' => $model->id]);
        // }
        //Se hace lo mismo que en el metodo create, esta linea nos sirve para subir la fotografia, si existiera un cambio se sube
        $this->subirFoto($model);

        //Se actualiza, pero la foto grafia aun va a existir si se conserva en uploads, el archivo anterior, pero como ya hicimos el borrado asi que vamos a utlilizarlo
        if(file_exists($model->imagen) ){
            unlink($model->imagen);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }


Soluciṕon prouesta.

Se reorganiza el actionUpdate() para primero guardar la ruta antigua, luego subir la nueva, luego eliminar la vieja.

    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        // Guarda temporalmente la imagen anterior antes de que sea sobreescrita
        $imagenAnterior = $model->imagen;

        // Si se está haciendo POST
        if ($this->request->isPost) {
            // Subimos la nueva foto (si la hay) y guardamos
            $this->subirFoto($model);

            // Si hay imagen anterior y es distinta a la nueva, eliminamos la anterior
            if ($imagenAnterior && $imagenAnterior !== $model->imagen && file_exists($imagenAnterior)) {
                unlink($imagenAnterior);
            }

            // Ya redirige dentro de subirFoto si todo fue bien
            return; // Importante para no volver a renderizar la vista
        }

        // Si no es POST, simplemente muestra el formulario de edición
        return $this->render('update', [
            'model' => $model,
        ]);
    }

Asi tambien se hace una Mejora ligera al método subirFoto

Puedes mantenerlo como está, pero te sugiero dejar fuera el redirect() y retornar un bool para saber si todo fue bien:

    protected function subirFoto(Libro $model)
    {
        if ($model->load($this->request->post())) {
            $model->archivo = UploadedFile::getInstance($model, 'archivo');

            if ($model->validate()) {
                if ($model->archivo) {
                    $rutaArchivo = 'uploads/' . time() . "_" . $model->archivo->baseName . "." . $model->archivo->extension;

                    if ($model->archivo->saveAs($rutaArchivo)) {
                        $model->imagen = $rutaArchivo;
                    }
                }
            }

            if ($model->save(false)) {
                return $this->redirect(['index']);
            }
        }

        return null;
    }    

Se prueba y ahora funcionamucho mejor al mantener al archivo temporal antes de ser sustituido en la actualización, asi tambien se dejo fuera de la validación el redirect hacia index.


